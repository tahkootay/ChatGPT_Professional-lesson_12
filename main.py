from fastapi import FastAPI
from chunks import Chunk
from chunks import load_document_text
import openai
from pydantic import BaseModel
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware
import datetime





url_link = 'https://docs.google.com/document/d/11MU3SnVbwL_rM-5fIC14Lc3XnbAV4rY1Zd_kpcMuH4Y'
text = load_document_text(url_link)
amount = 0
time_stamps = []
#print(text::100)
# инициализация индексной базы
chunk = Chunk(document=text)
# класс с типами данных параметров 
class Item(BaseModel): 
    text: str

# создаем объект приложения
app = FastAPI()

# Настраиваем CORS для вашего сервера FastAPI
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Список разрешённых источников (или конкретные источники)
    allow_credentials=True,
    allow_methods=["*"],  # Список разрешённых методов HTTP (например, GET, POST)
    allow_headers=["*"],  # Список разрешённых заголовков
)


# функция обработки get запроса + декоратор 
@app.get("/")
def read_root():
    return {"message": "Всё работает"}

# функция обработки post запроса + декоратор 
@app.post("/api/get_answer")
def get_answer(question: Item):
    answer = chunk.get_answer(query=question.text)
    return {"message": answer}

@app.get("/get_answer_browser={text}")
def get_answer_browser(text):
    answer = chunk.get_answer(query=text)
    global amount
    global time_stamps
    amount += 1
    time_stamps.append(datetime.datetime.now())
    print('Вопрос:', text)
    print('Ответ:', answer)
    print('отметки времени:', time_stamps)
    #return {"message": answer}
    return answer

@app.get("/how_many_requests")
def how_many_requests(): 
    global time_stamps
    #time_stamps_test = ['2024-03-18T12:22:23.006868', '2024-03-18T03:01:37.660352', '2024-03-18T17:39:37.112690', '2024-03-18T17:22:12.580349', '2024-03-18T18:06:35.871523', '2024-03-18T01:44:32.168457', '2024-03-18T08:05:20.345526', '2024-03-18T18:55:18.318667', '2024-03-18T05:59:13.213172', '2024-03-18T21:41:07.808440', '2024-03-18T08:59:07.253475', '2024-03-18T21:09:10.669187', '2024-03-18T18:30:44.777895', '2024-03-18T10:31:11.026337', '2024-03-18T00:43:28.312180', '2024-03-18T03:12:04.621330', '2024-03-18T20:55:41.263111', '2024-03-18T05:17:02.677120', '2024-03-18T05:03:36.672171', '2024-03-18T01:49:38.957822', '2024-03-18T13:13:27.409979', '2024-03-18T11:42:09.992754', '2024-03-18T04:24:52.669263', '2024-03-18T22:40:46.569095', '2024-03-18T08:51:58.413579', '2024-03-18T09:32:00.229460', '2024-03-18T18:03:03.750944', '2024-03-18T14:25:44.125174', '2024-03-18T05:42:53.725652', '2024-03-18T16:39:56.060892', '2024-03-18T01:05:05.985056', '2024-03-18T07:04:25.258111', '2024-03-18T05:34:03.995239', '2024-03-18T17:14:55.031782', '2024-03-18T05:28:16.849959', '2024-03-18T08:30:19.468799', '2024-03-18T23:53:29.805963', '2024-03-18T18:57:19.112787', '2024-03-18T13:26:13.910049', '2024-03-18T05:00:37.991117', '2024-03-18T06:46:25.918483', '2024-03-18T04:56:56.784880', '2024-03-18T11:18:43.128172', '2024-03-18T09:24:59.432541', '2024-03-18T18:08:27.536521', '2024-03-18T02:32:50.118579', '2024-03-18T08:59:57.639148', '2024-03-18T07:01:54.715537', '2024-03-18T02:46:05.701159', '2024-03-18T09:42:45.080229', '2024-03-18T16:05:37.581828', '2024-03-18T04:40:45.030356', '2024-03-18T20:48:43.547480', '2024-03-18T10:36:18.810100', '2024-03-18T07:32:01.599770', '2024-03-18T16:23:14.222870', '2024-03-18T22:03:20.866072', '2024-03-18T12:31:31.691468', '2024-03-18T03:08:19.698658', '2024-03-18T19:13:31.444416', '2024-03-18T05:08:51.251209', '2024-03-18T01:27:39.260895', '2024-03-18T13:32:44.252745', '2024-03-18T05:47:05.472797', '2024-03-18T14:00:04.021563', '2024-03-18T04:10:19.216971', '2024-03-18T19:15:13.701412', '2024-03-18T02:17:46.664803', '2024-03-18T01:16:14.223771', '2024-03-18T18:47:40.339054', '2024-03-18T13:29:07.017009', '2024-03-18T23:19:43.204438', '2024-03-18T10:04:11.608243', '2024-03-18T18:53:59.129645', '2024-03-18T03:34:59.585438', '2024-03-18T13:30:55.556291', '2024-03-18T00:47:40.852609', '2024-03-18T19:29:02.874029', '2024-03-18T20:15:26.303557', '2024-03-18T16:09:02.414196', '2024-03-18T02:47:02.761672', '2024-03-18T09:48:05.055546', '2024-03-18T22:45:18.587431', '2024-03-18T17:32:33.834629', '2024-03-18T00:00:21.602894', '2024-03-18T05:34:47.056164', '2024-03-18T11:41:27.169808', '2024-03-18T14:32:31.464425', '2024-03-18T14:19:26.392962', '2024-03-18T10:46:33.470525', '2024-03-18T10:11:01.688015', '2024-03-18T19:44:25.064596', '2024-03-18T01:39:24.161193', '2024-03-18T20:07:09.809884', '2024-03-18T00:40:22.517871', '2024-03-18T20:35:59.528630', '2024-03-18T06:14:04.744298', '2024-03-18T08:20:12.052651', '2024-03-18T22:40:25.776028', '2024-03-18T06:00:15.062139']
    return time_stamps

#функция-обработчик post запроса с параметрами
@app.post("/users")
def post_model(item:Item):
    return {"user_name": item.name, "description": item.description, "price": item.price}

# функция-обработчик с параметрами пути
@app.get("/users/{id}")
def users(id):
    return {"user_id": id}

#print('Файл исполнен')


